name: Gas Data Scraper

on:
  schedule:
    - cron: '0 8 * * *'  # Midnight UTC for historical data
    - cron: '40 9 * * *'  # 4:40 AM UTC for live data
  workflow_dispatch:  # Allow manual triggering

jobs:
  historical_scrape:
    runs-on: ubuntu-latest
    steps:
      - name: Set timezone to Eastern Time
        run: |
          sudo timedatectl set-timezone America/New_York

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run historical gas scraper
        run: |
          python gashistorical.py

      - name: Verify HistoricalGasData.csv exists
        run: |
          if [ ! -f "CountyPrices/HistoricalGasData.csv" ]; then
            echo "HistoricalGasData.csv file not found!"
            exit 1
          fi

      - name: List files in CountyPrices
        run: |
          echo "Listing files in CountyPrices directory:"
          ls -l CountyPrices

      - name: Print current date in Eastern Time
        run: |
          echo "Current date in Eastern Time:"
          date

      - name: Commit and push HistoricalGasData.csv to repository
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Force add the historical gas data file to ensure it's staged
          git add -f CountyPrices/HistoricalGasData.csv
          
          # Check if there are any changes to commit
          if ! git diff-index --quiet HEAD --; then
            git commit -m "Update historical gas data"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main
          else
            echo "No changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  live_scrape:
    runs-on: ubuntu-latest
    needs: historical_scrape
    steps:
      - name: Set timezone to Eastern Time
        run: |
          sudo timedatectl set-timezone America/New_York

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run live gas scraper and export data
        run: |
          python countygas.py

      - name: Verify LiveScrape.csv and MasterMergedGas.csv exist
        run: |
          if [ ! -f "CountyPrices/LiveScrape.csv" ]; then
            echo "LiveScrape.csv file not found!"
            exit 1
          fi
          if [ ! -f "CountyPrices/MasterMergedGas.csv" ]; then
            echo "MasterMergedGas.csv file not found!"
            exit 1
          fi

      - name: List files in CountyPrices
        run: |
          echo "Listing files in CountyPrices directory:"
          ls -l CountyPrices

      - name: Print current date in Eastern Time
        run: |
          echo "Current date in Eastern Time:"
          date

      - name: Commit and push both CSV files to repository
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Force add both CSV files to ensure they are staged
          git add -f CountyPrices/LiveScrape.csv CountyPrices/MasterMergedGas.csv
          
          # Check if there are any changes to commit
          if ! git diff-index --quiet HEAD --; then
            git commit -m "Update live and merged gas data"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main
          else
            echo "No changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
